<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="loader" type="System.Byte[], mscorlib">
    <value>
        NxEAEDcRABA3EQAQNxEAEDcRABAjeRaI/////wAAAADwCwAQAAAAAAAAAADcDgAQRA8AEKwPABAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcNwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAADjPNqzQSbebs3gUACwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        YHiN+AkAoHiN+AoA4HiN+AsAAphIUeB5Ayjd6QABAtH/91X+AeD/9w7+ApjHQzNIR1HgeQMo3ekAAQLR
        //dH/gHg//cA/tr4AADABAvVoHgBkFpGYHgAkEFGGfg7MA/yoDD/9zP6JEgP8gxEQFkCmYhCCdAwaMAE
        BtUfSENZCkYpRiBG//ci+hxIQFm4QhnQMGjABBbVGUhDWTpGKR0gRgOwvejwT//3EbowaMAECdUF9RBB
        A7C96PBPgDEP8vgw//cEur3o948QAwAQDAMAEGBgAEA0EAAQwAIAQBQDABAEYABAFAAAQAhgAEAcYQBA
        AAMAQORgAECAkACYhJAAmA1Jbml0aWFsIFNwaWMgRm91ciBiaXQgbW9kZQoAAAAADU5vIFN1cHBvcnQg
        U1BJIE1vZGUhISEhISEhIQoAAAANU1BJIGNhbGlicmF0aW9uIGZhaWwgYW5kIHJlY292ZXIgb25lIGJp
        dCBtb2RlCgBTcGljUmVhZElEUnRsODE5NUEAAA1bU1BJRiBJbmZdJXMoMHgleCkKAAAAAA1JbnZhbGlk
        IElECgAAAAANU1BJIGNhbGlicmF0aW9uCgAAAA1GaW5kIHRoZSBhdmFpYWJsZSB3aW5kb3cKAAANQmF1
        ZDoleDsgYXV0b19sZW5ndGg6JXg7IERlbGF5IHN0YXJ0OiV4OyBEZWxheSBlbmQ6JXgKAFNwaWNXYWl0
        V2lwRG9uZVJlZmluZWRSdGw4MTk1QQAAU3BpY0dldEZsYXNoRmxhZ1J0bDgxOTVBAAAAAA1bU1BJRiBX
        cm5dQXR0ZW1wdHMgdG8gUHJvZ3JhbSAvIEVyYXNlIFByb3RlY3RlZCBBcmVhLgoAU3BpY1dhaXRPcGVy
        YXRpb25Eb25lUnRsODE5NUEAAABTcGljUnhDbWRSZWZpbmVkUnRsODE5NUEAAAAADVtTUElGIEluZl0l
        cygweCV4LCAweCV4KQoAAFNwaWNHZXRGbGFzaFN0YXR1c1JlZmluZWRSdGw4MTk1QQAAAA1bU1BJRiBJ
        bmZdU3BpY05WTUNhbExvYWQ6IENhbGlicmF0aW9uIExvYWRlZChCaXRNb2RlICVkLCBDUFVDbGsgJWQp
        OiBCYXVkUmF0ZT0weCV4IFJkRHVtbXlDeWxlPTB4JXggRGVsYXlMaW5lPTB4JXgNCgAAAA1bU1BJRiBX
        cm5dU3BpY05WTUNhbExvYWQ6IERhdGEgaW4gRmxhc2goQCAweCV4ID0gMHgleCAweCV4KSBpcyBJbnZh
        bGlkDQoAAAANW1NQSUYgSW5mXVNwaWNOVk1DYWxTdG9yZT09PiBCaXRNb2RlPSVkIENwdUNsaz0lZA0K
        AAAAAA1bU1BJRiBJbmZdU3BpY05WTUNhbFN0b3JlKEJpdE1vZGUgJWQsIENQVUNsayAlZCk6IENhbGli
        cmF0aW9uIFN0b3JlZDogQmF1ZFJhdGU9MHgleCBSZER1bW15Q3lsZT0weCV4IERlbGF5TGluZT0weCV4
        DQoAAA1bU1BJRiBFcnJdU3BpY05WTUNhbFN0b3JlIEVycihPZmZzZXQ9MHgleCksIFdyPTB4JXggUmQ9
        MHgleCANCgANW1NQSUYgRXJyXVNwaWNOVk1DYWxTdG9yZTogVGhlIGZsYXNoIG1lbW9yeShAMHgleCA9
        IDB4JXgpIGlzIG5vdCBhYmxlIHRvIGJlIHdyaXRlLCBFcmFzZSBpdCBmaXJzdCEhDQoAAN/4APARCQAA
        3/gA8FUDAADf+ADwhTQAAElISkkBYEpJQWBwR0lJT/D/MAhgACBISQhgSEkIYHBHH7VHTAAgYGCAIOBg
        //fg/4AIAJkJAbD78fIKI1hDsPvx8AP7EgAFKCi/UhzQsiBgwvMHIGBgACDgYJ34DRCd+AwACEOd+A4Q
        CEPgYAGYoGACmGBgkLEzSU/wgHAIYE/2/wIxSAFoEUAwShFDAWDgIC9JCHBP9AAgLkkIYAAgBLAQvYC1
        I0gsSQBoCEIF0A/yzAEP8twA/vdt/yhIAGgAkJ34AwDACRy/vegBQP/3lL8BvTi1IkwFRiBoEPCCDxvQ
        IGkgSQgYsPWALxXSEUgAaEAARL8LoP73Tf8F8RgAAWgKiAL0eEKy9WBPzL8JHYkcAWBgaGBgMb0oRr3o
        MkD/92O/AAANLgAAXGwAELRpABBkbAAQFAMAEAwDABAQAwAQADAAQAwoAEAM7QDgAAP6BRPkAOAA4QDg
        ACAAQAAoAEAo7QDgAAD4vx7wBA8Mv+/zCIDv8wmA//esv3BHSGFsTk1JSGFuZGxlcl9QYXRjaAANUlRM
        ODE5NUFbSEFMXTogJXM6Tk1JIEVycm9yISEhIQoAAABTcGljVHhDbWRXaXRoRGF0YVJ0bDgxOTVBAAAA
</value>
  </data>
</root>